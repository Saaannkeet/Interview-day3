 
 Que1:: What are promises and why do we need them.
 Ans::Promise is a constructor function , which takes two arguments/parameters, resolve and reject.If the promise has
      been resolved properly then it will go to the .then block and if the promise has been rejected due to 
      some errors then it will go to the .catch block.  Promises are used to handle asynchronous operations.
      They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code
        
        const promise = new Promise(
  (resolve) => {
    setTimeout(() => {
      resolve("I'm a Promise!");
    }, 5000);
  },
  (reject) => {}
);

promise.then((value) => console.log(value))


  Que2::What is the purpuse of async/await keywords.              
  Ans:: await can be used on its own with JavaScript modules.  
        The purpose of async / await is to simplify  the syntax necessary to consume promise-based APIs.
        The behavior of async / await is similar to combining generators and promises. 
        Async functions always return a promise. To avoid of multiple .then blocks(promise chaining) by using async/await.


   Que3::What is hoisting.
   Ans:: hoisting is a java script mechamism whereas classes , variable , function declaration move top of 
         their scope Before code execution ,in java script only hoist delcaration not intialization. 


   Que4::What is the DOM
   Ans::DOM stands for Document Object Model. It is a programming interface that allows us to create, change, or 
        remove elements from the document. We can also add events to these elements to make our page more dynamic.



   Que5::what are arrow function?
   Ans::  An arrow function is a shorter syntax for a function expression and does not have its own this, arguments, 
    super, or new.target. These functions are best suited for non-method functions, and they cannot be used as constructors.
        ‌A Pure function is a function where the return value is only determined by its arguments without any side 
        effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places 
        in the application then it will always return the same value.

     

   que5::how many oprator do we have in js.  
   Ans::‌An operator is capable of manipulating(mathematical and logical computations) a certain value or operand.
        There are various operators supported by JavaScript as below,

    1]Arithmetic Operators:: Includes + (Addition),– (Subtraction), * (Multiplication), / (Division), % (Modulus), 
                            + + (Increment) and – – (Decrement)

    2]Comparison Operators:: Includes = =(Equal),!= (Not Equal), ===(Equal with type), > (Greater than),
                            > = (Greater than or Equal to),< (Less than),<= (Less than or Equal to)

    3]Logical Operators: Includes &&(Logical AND),||(Logical OR),!(Logical NOT)

    4]Assignment Operators: Includes = (Assignment Operator), += (Add and Assignment Operator), 
                          – = (Subtract and Assignment Operator), *= (Multiply and Assignment), 
                          /= (Divide and Assignment), %= (Modules and Assignment)
    
    5]Ternary Operators: It includes conditional(: ?) Operator

   
    Que 6::
    Ans::   Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug 
           when dealing with asynchronous logic. 


     

